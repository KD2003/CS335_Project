Terminals unused in grammar

    IDENTIFIER
    LITERAL
    ESCSEQ
    OPERATOR
    SEP


Grammar

    0 $accept: prog $end

    1 prog: start
    2     | KEYWORD

    3 start: word start
    4      | word

    5 word: '('
    6     | ')'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 5
    ')' (41) 6
    error (256)
    KEYWORD (258) 2
    IDENTIFIER (259)
    LITERAL <lit> (260)
    ESCSEQ (261)
    OPERATOR (262)
    SEP (263)


Nonterminals, with rules where they appear

    $accept (11)
        on left: 0
    prog (12)
        on left: 1 2
        on right: 0
    start (13)
        on left: 3 4
        on right: 1 3
    word (14)
        on left: 5 6
        on right: 3 4


State 0

    0 $accept: • prog $end

    KEYWORD  shift, and go to state 1
    '('      shift, and go to state 2
    ')'      shift, and go to state 3

    prog   go to state 4
    start  go to state 5
    word   go to state 6


State 1

    2 prog: KEYWORD •

    $default  reduce using rule 2 (prog)


State 2

    5 word: '(' •

    $default  reduce using rule 5 (word)


State 3

    6 word: ')' •

    $default  reduce using rule 6 (word)


State 4

    0 $accept: prog • $end

    $end  shift, and go to state 7


State 5

    1 prog: start •

    $default  reduce using rule 1 (prog)


State 6

    3 start: word • start
    4      | word •

    '('  shift, and go to state 2
    ')'  shift, and go to state 3

    $default  reduce using rule 4 (start)

    start  go to state 8
    word   go to state 6


State 7

    0 $accept: prog $end •

    $default  accept


State 8

    3 start: word start •

    $default  reduce using rule 3 (start)
